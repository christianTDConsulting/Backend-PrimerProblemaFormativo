generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bloqueos {
  id          Int       @id @default(autoincrement())
  ip_address  String?   @db.VarChar(50)
  fecha_hasta DateTime? @db.Timestamp(0)
}

model clientes {
  id         Int         @id @default(autoincrement())
  nombre     String?     @db.VarChar(50)
  bio        String?     @db.VarChar(200)
  id_usuario Int?        @unique(map: "id_usuario")
  nacimiento DateTime    @db.Date
  visible    Boolean     @default(dbgenerated("(b'1')")) @db.Bit(1)
  usuarios   usuarios?   @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_clientes_usuarios")
  telefonos  telefonos[]
}

model consumos {
  id          Int       @id @default(autoincrement())
  id_telefono Int
  consumo     Float     @default(0)
  fecha       DateTime  @db.Date
  telefonos   telefonos @relation(fields: [id_telefono], references: [id], onDelete: NoAction, map: "FK_gastos_telefonos")

  @@index([id_telefono], map: "FK_gastos_telefonos")
}

model detalles_prediccion {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  id_metereologia Int?
  fecha           DateTime      @default(now()) @db.Timestamp(0)
  nombre          String?       @db.VarChar(50)
  valor           String?       @db.VarChar(50)
  periodo         String?       @db.VarChar(50)
  descripcion     String?       @db.VarChar(50)
  hora            Int?
  velocidad       Int?
  direccion       String?       @db.VarChar(50)
  metereologia    metereologia? @relation(fields: [id_metereologia], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_detalles_prediccion_metereologia")

  @@index([id_metereologia], map: "FK_detalles_prediccion_metereologia")
}

model logs {
  id         Int      @id @default(autoincrement())
  fecha      DateTime @default(now()) @db.Timestamp(0)
  email      String   @default("") @db.VarChar(60)
  exito      Boolean  @db.Bit(1)
  ip_address String   @db.VarChar(50)
}

model municipios {
  id           String         @id @db.VarChar(50)
  nombre       String?        @db.VarChar(255)
  provincia    String?        @db.VarChar(255)
  metereologia metereologia[]
}

model perfiles {
  id  Int     @id
  rol String? @db.VarChar(50)
}

model telefonos {
  id         Int        @id @default(autoincrement())
  numero     String     @db.VarChar(15)
  id_cliente Int        @default(0)
  visible    Boolean?   @default(dbgenerated("(b'1')")) @db.Bit(1)
  consumos   consumos[]
  clientes   clientes   @relation(fields: [id_cliente], references: [id], onDelete: NoAction, map: "FK__clientes")

  @@index([id_cliente], map: "FK__clientes")
}

model usuarios {
  id        Int       @id @default(autoincrement())
  password  String    @db.VarChar(300)
  email     String    @unique(map: "email") @db.VarChar(50)
  id_perfil Int?
  clientes  clientes?
}

model metereologia {
  id                  Int                   @id @default(autoincrement())
  id_municipio        String?               @db.VarChar(50)
  fecha_guardado      DateTime?             @default(now()) @db.Date
  detalles_prediccion detalles_prediccion[]
  municipios          municipios?           @relation(fields: [id_municipio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_metereologia_municipios")

  @@index([id_municipio], map: "FK_metereologia_municipios")
}

model empresas_asociadas {
  id               Int    @id @default(autoincrement())
  razon_social     String @db.VarChar(255)
  zona_geografica  String @db.VarChar(255)
  sector_actividad String @db.VarChar(255)
  n__empleados     String @map("nÂº_empleados") @db.VarChar(255)
}
