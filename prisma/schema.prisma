generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model articulos {
  id                        Int                         @id @default(autoincrement())
  nombre                    String                      @default("") @db.VarChar(255)
  precio                    Float                       @default(0)
  dimensiones               String                      @default("") @db.VarChar(255)
  descripcion               String                      @default("") @db.VarChar(255)
  foto                      String?                     @db.VarChar(255)
  stock                     Int
  articulos_caracteristicas articulos_caracteristicas[]
}

model articulos_caracteristicas {
  id                 Int             @id @default(autoincrement())
  id_caracteristicas Int             @default(0)
  id_articulos       Int?            @default(0)
  articulos          articulos?      @relation(fields: [id_articulos], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_articulos_caracteristicas_articulos")
  caracteristicas    caracteristicas @relation(fields: [id_caracteristicas], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_articulos_caracteristicas_caracteristicas")

  @@index([id_articulos], map: "FK_articulos_caracteristicas_articulos")
  @@index([id_caracteristicas], map: "FK_articulos_caracteristicas_caracteristicas")
}

model bloqueos {
  id          Int       @id @default(autoincrement())
  ip_address  String?   @db.VarChar(50)
  fecha_hasta DateTime? @db.Timestamp(0)
}

model caracteristicas {
  id                        Int                         @id @default(autoincrement())
  nombre                    String?                     @db.VarChar(255)
  articulos_caracteristicas articulos_caracteristicas[]
}

model clientes {
  id         Int         @id @default(autoincrement())
  nombre     String?     @db.VarChar(50)
  bio        String?     @db.VarChar(200)
  id_usuario Int?        @unique(map: "id_usuario")
  nacimiento DateTime    @db.Date
  visible    Boolean     @default(dbgenerated("(b'1')")) @db.Bit(1)
  usuarios   usuarios?   @relation(fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_clientes_usuarios")
  telefonos  telefonos[]
}

model consumos {
  id          Int       @id @default(autoincrement())
  id_telefono Int
  consumo     Float     @default(0)
  fecha       DateTime  @db.Date
  telefonos   telefonos @relation(fields: [id_telefono], references: [id], onDelete: NoAction, map: "FK_gastos_telefonos")

  @@index([id_telefono], map: "FK_gastos_telefonos")
}

model conversacion {
  id                                          String     @id @default("AUTO_INCREMENT") @db.VarChar(50)
  id_usuario                                  Int        @default(0)
  fecha_inicio                                DateTime   @default(now()) @db.Timestamp(0)
  asistente                                   String     @db.VarChar(50)
  asistente_conversacion_asistenteToasistente asistente  @relation("conversacion_asistenteToasistente", fields: [asistente], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_conversacion_asistente")
  usuarios                                    usuarios   @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_conversacion_usuarios")
  mensajes                                    mensajes[]

  @@index([id_usuario], map: "FK_conversacion_usuarios")
  @@index([asistente], map: "FK_conversacion_asistente")
}

model detalles_prediccion {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  id_metereologia Int?
  fecha           DateTime      @default(now()) @db.Timestamp(0)
  nombre          String?       @db.VarChar(50)
  valor           String?       @db.VarChar(50)
  periodo         String?       @db.VarChar(50)
  descripcion     String?       @db.VarChar(50)
  hora            Int?
  velocidad       Int?
  direccion       String?       @db.VarChar(50)
  metereologia    metereologia? @relation(fields: [id_metereologia], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_detalles_prediccion_metereologia")

  @@index([id_metereologia], map: "FK_detalles_prediccion_metereologia")
}

model empresas_asociadas {
  id               Int    @id @default(autoincrement())
  razon_social     String @db.VarChar(255)
  zona_geografica  String @db.VarChar(255)
  sector_actividad String @db.VarChar(255)
  numero_empleados String @db.VarChar(255)

  @@unique([razon_social, zona_geografica, sector_actividad, numero_empleados], map: "razon_social_zona_geografica_sector_actividad_nÂº_empleados")
}

model logs {
  id         Int      @id @default(autoincrement())
  fecha      DateTime @default(now()) @db.Timestamp(0)
  email      String   @default("") @db.VarChar(60)
  exito      Boolean  @db.Bit(1)
  ip_address String   @db.VarChar(50)
}

model mensajes {
  id              Int          @id @default(autoincrement())
  id_conversacion String       @default("0") @db.VarChar(50)
  prompt          String       @db.Text
  respuesta       String       @db.Text
  timestamp       DateTime?    @default(now()) @db.DateTime(0)
  conversacion    conversacion @relation(fields: [id_conversacion], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK__conversacion")

  @@index([id_conversacion], map: "FK_mensajes_conversacion")
}

model metereologia {
  id                  Int                   @id @default(autoincrement())
  id_municipio        String?               @db.VarChar(50)
  fecha_guardado      DateTime?             @default(now()) @db.Date
  detalles_prediccion detalles_prediccion[]
  municipios          municipios?           @relation(fields: [id_municipio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_metereologia_municipios")

  @@index([id_municipio], map: "FK_metereologia_municipios")
}

model municipios {
  id           String         @id @db.VarChar(50)
  nombre       String?        @db.VarChar(255)
  provincia    String?        @db.VarChar(255)
  metereologia metereologia[]
}

model perfiles {
  id       Int        @id
  rol      String?    @db.VarChar(50)
  usuarios usuarios[]
}

model telefonos {
  id         Int        @id @default(autoincrement())
  numero     String     @db.VarChar(15)
  id_cliente Int        @default(0)
  visible    Boolean?   @default(dbgenerated("(b'1')")) @db.Bit(1)
  consumos   consumos[]
  clientes   clientes   @relation(fields: [id_cliente], references: [id], onDelete: NoAction, map: "FK__clientes")

  @@index([id_cliente], map: "FK__clientes")
}

model usuarios {
  id           Int            @id @default(autoincrement())
  password     String         @db.VarChar(300)
  email        String         @unique(map: "email") @db.VarChar(50)
  id_perfil    Int?
  clientes     clientes?
  conversacion conversacion[]
  perfiles     perfiles?      @relation(fields: [id_perfil], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_usuarios_perfiles")

  @@index([id_perfil], map: "FK_usuarios_perfiles")
}

model asistente {
  id                                             String         @id @db.VarChar(50)
  nombre                                         String         @unique(map: "nombre") @db.VarChar(50)
  conversacion_conversacion_asistenteToasistente conversacion[] @relation("conversacion_asistenteToasistente")
}

model imagenes_carteles {
  id         Int      @id @default(autoincrement())
  modelo     String   @default("") @db.VarChar(50)
  imagen     String   @unique(map: "Imagen2") @db.VarChar(50)
  timestamp  DateTime @default(now()) @db.Timestamp(0)
  resultado  String?  @db.VarChar(50)
  comentario String?  @db.Text
}

model imagenes_moviles {
  id                        Int                         @id @default(autoincrement())
  timestamp                 DateTime                    @default(now()) @db.Date
  status                    String                      @db.VarChar(50)
  total                     Int
  imagenes_moviles_contados imagenes_moviles_contados[]
}

model imagenes_moviles_contados {
  id                  Int              @id @default(autoincrement())
  id_imagenes_moviles Int
  imagen              String           @db.VarChar(50)
  x                   Int
  y                   Int
  imagenes_moviles    imagenes_moviles @relation(fields: [id_imagenes_moviles], references: [id], onDelete: Cascade, map: "FK_imagenes_moviles_contados_imagenes_moviles")

  @@index([id_imagenes_moviles], map: "FK_imagenes_moviles_contados_imagenes_moviles")
}
